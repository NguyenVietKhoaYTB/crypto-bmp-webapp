# web_app.py
import streamlit as st
import os
import sys
from PIL import Image
import io

# Th√™m ƒë∆∞·ªùng d·∫´n hi·ªán t·∫°i v√†o sys.path ƒë·ªÉ import c√°c module
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

try:
    from crypto_utils import encrypt_bytes, decrypt_bytes
    from image_utils import read_bmp, write_bmp
except ImportError as e:
    st.error(f"L·ªói import module: {e}")
    st.stop()

st.set_page_config(page_title="üîê Web App M√£ H√≥a BMP", layout="wide")
st.title("üîê Web App M√£ H√≥a BMP")
st.write("·ª®ng d·ª•ng m√£ h√≥a/gi·∫£i m√£ ·∫£nh BMP b·∫±ng AES, ƒë∆∞·ª£c t·∫°o b·ªüi Nguy·ªÖn Vi·ªát Khoa YTB")

# Upload file
uploaded_file = st.file_uploader("Ch·ªçn file BMP", type=["bmp"])

if uploaded_file is not None:
    try:
        # L∆∞u file t·∫°m ƒë·ªÉ ƒë·ªçc
        with open("temp_upload.bmp", "wb") as f:
            f.write(uploaded_file.getbuffer())
        
        # Hi·ªÉn th·ªã ·∫£nh g·ªëc
        st.image("temp_upload.bmp", caption="·∫¢nh g·ªëc", use_column_width=True)
        
        # Ch·ªçn ch·∫ø ƒë·ªô
        mode = st.selectbox("Ch·ªçn ch·∫ø ƒë·ªô m√£ h√≥a", ["ECB", "CBC", "CFB", "OFB", "CTR"])
        
        # Nh·∫≠p key
        key_input = st.text_input("Nh·∫≠p key (hex ho·∫∑c text)", value="mysecretkey")
        
        # Nh·∫≠p IV (n·∫øu c·∫ßn)
        if mode != "ECB":
            iv_input = st.text_input("Nh·∫≠p IV (hex ho·∫∑c text)", value="")
        else:
            iv_input = ""
        
        # N√∫t m√£ h√≥a v√† gi·∫£i m√£
        col1, col2 = st.columns(2)
        
        with col1:
            if st.button("üîí M√£ H√≥a", key="encrypt_btn"):
                try:
                    # ƒê·ªçc file BMP
                    header, pixels = read_bmp("temp_upload.bmp")
                    
                    # M√£ h√≥a
                    ciphertext, actual_iv = encrypt_bytes(pixels, key_input, mode, iv_input if iv_input else None)
                    
                    # L∆∞u file ƒë√£ m√£ h√≥a
                    output_path = "encrypted.bmp"
                    write_bmp(output_path, header, ciphertext)
                    
                    # Hi·ªÉn th·ªã k·∫øt qu·∫£
                    st.success("M√£ h√≥a th√†nh c√¥ng!")
                    st.image(output_path, caption="·∫¢nh ƒë√£ m√£ h√≥a", use_column_width=True)
                    
                    # Download button
                    with open(output_path, "rb") as file:
                        st.download_button(
                            label="üì• T·∫£i ·∫£nh ƒë√£ m√£ h√≥a",
                            data=file,
                            file_name="encrypted.bmp",
                            mime="image/bmp"
                        )
                    
                    if actual_iv:
                        st.info(f"IV ƒë∆∞·ª£c s·ª≠ d·ª•ng: {actual_iv.hex()}")
                        
                except Exception as e:
                    st.error(f"L·ªói khi m√£ h√≥a: {str(e)}")
        
        with col2:
            if st.button("üîì Gi·∫£i M√£", key="decrypt_btn"):
                try:
                    # ƒê·ªçc file BMP
                    header, pixels = read_bmp("temp_upload.bmp")
                    
                    # Gi·∫£i m√£
                    plaintext = decrypt_bytes(pixels, key_input, mode, iv_input if iv_input else None)
                    
                    # L∆∞u file ƒë√£ gi·∫£i m√£
                    output_path = "decrypted.bmp"
                    write_bmp(output_path, header, plaintext)
                    
                    # Hi·ªÉn th·ªã k·∫øt qu·∫£
                    st.success("Gi·∫£i m√£ th√†nh c√¥ng!")
                    st.image(output_path, caption="·∫¢nh ƒë√£ gi·∫£i m√£", use_column_width=True)
                    
                    # Download button
                    with open(output_path, "rb") as file:
                        st.download_button(
                            label="üì• T·∫£i ·∫£nh ƒë√£ gi·∫£i m√£",
                            data=file,
                            file_name="decrypted.bmp",
                            mime="image/bmp"
                        )
                        
                except Exception as e:
                    st.error(f"L·ªói khi gi·∫£i m√£: {str(e)}")
    
    except Exception as e:
        st.error(f"L·ªói x·ª≠ l√Ω file: {str(e)}")
    
    finally:
        # D·ªçn d·∫πp file t·∫°m
        if os.path.exists("temp_upload.bmp"):
            os.remove("temp_upload.bmp")
else:
    st.info("Vui l√≤ng t·∫£i l√™n file BMP ƒë·ªÉ b·∫Øt ƒë·∫ßu")

# Th√™m footer
st.markdown("---")

st.markdown("·ª®ng d·ª•ng m√£ h√≥a BMP b·∫±ng AES - Created with Streamlit")
